//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace nilnul.fs.git.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("nilnul.fs.git.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ###############################################################################
        ///# Set default behavior to automatically normalize line endings.
        ///###############################################################################
        ///* text=auto
        ///
        ///###############################################################################
        ///# Set default behavior for command prompt diff.
        ///#
        ///# This is need for earlier builds of msysgit that does not have it on by
        ///# default for csharp files.
        ///# Note: This is only used by comma [rest of string was truncated]&quot;;.
        /// </summary>
        public static string defaultGitAttribute {
            get {
                return ResourceManager.GetString("defaultGitAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # for dotnet repo(generally a prj, sometimes a sln)
        ///
        ///
        ///###### for nilnul, see nilnul.fs.git.module.work.div.doc_.ignore.patch_._nn._rules. the following shall be retired 
        ///
        ///#nilnul: ignore folders or files
        ///**/*(!Git
        ///
        ///#nilnul retiring a repo by renaming it to the ~{reason}{date}).git
        ///**/*).git/
        ///#in case mistypo
        ///**/*(.git
        ///
        ///#nilnul: makeing a repo from inside a repo; to avoid conflicts with parent repo, name a special folder in place; this folder is named: yourWork(Git/
        ///**/*(Git/
        ///
        ///#nilnul: ignore [rest of string was truncated]&quot;;.
        /// </summary>
        public static string dotNetIgnore {
            get {
                return ResourceManager.GetString("dotNetIgnore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # Windows thumbnail cache files
        ///Thumbs.db
        ///Thumbs.db:encryptable
        ///ehthumbs.db
        ///ehthumbs_vista.db
        ///
        ///# Dump file
        ///*.stackdump
        ///
        ///# Folder config file
        ///[Dd]esktop.ini
        ///
        ///# Recycle Bin used on file shares
        ///$RECYCLE.BIN/
        ///
        ///# Windows Installer files
        ///*.cab
        ///*.msi
        ///*.msix
        ///*.msm
        ///*.msp
        ///
        ///# Windows shortcuts
        ///*.lnk.
        /// </summary>
        public static string ignore4windows {
            get {
                return ResourceManager.GetString("ignore4windows", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #nilnul: ignore temp files
        ///**/~(*
        ///**/~)*
        ///#~$*
        ///**/~$*
        ///
        ///
        ///#nilnul retiring a repo by renaming it to the ~{reason}{date}).git
        ///**/*).git/
        ///**/*(.git/
        ///
        ///#nilnul: makeing a repo from inside a repo; to avoid conflicts with parent repo, name a special folder in place; this folder is named: (Git
        ///**/*([Gg]it/
        ///
        ///
        ///# excluded; not controlled by version
        ///**/*(!Git/
        ///**/*(![Gg]it).*
        ///**/*(![Gg]it)*
        ///**/*(![Gg]it)
        ///
        ///
        ///#files generated for output
        ///**/out)*
        ///**/~out)*
        ///**/*.out(![Gg]it)
        ///**/*.out(![Gg]it).*
        ///
        ///
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string nilnulIgnore {
            get {
                

                return ResourceManager.GetString("nilnulIgnore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #!/usr/bin/env bash
        ///set -euo pipefail
        ///
        ///#
        ///# transcrypt - https://github.com/elasticdog/transcrypt
        ///#
        ///# A script to configure transparent encryption of sensitive files stored in
        ///# a Git repository. It utilizes OpenSSL&apos;s symmetric cipher routines and follows
        ///# the gitattributes(5) man page regarding the use of filters.
        ///#
        ///# Copyright (c) 2014-2019 Aaron Bull Schaefer &lt;aaron@elasticdog.com&gt;
        ///# This source code is provided under the terms of the MIT License
        ///# that can be be found in the LICENSE file.
        ///#
        ///
        ///##### CONST [rest of string was truncated]&quot;;.
        /// </summary>
        public static string transcrypt {
            get {
                return ResourceManager.GetString("transcrypt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to bash transcrypt -y
        ///if errorlevel 1 goto end
        ///echo: &gt;&gt; .gitattributes
        ///echo *.crypt filter=crypt diff=crypt &gt;&gt; .gitattributes
        ///:end
        ///pause.
        /// </summary>
        public static string transcryptBat {
            get {
                return ResourceManager.GetString("transcryptBat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #downloaded from web(github)
        ///
        ///# vs
        ///*/bin/
        ///*/obj/
        ///
        ///*/.vs/
        ///
        ///*.ide/
        ///$tf/
        ////$tf/
        ///$tf/*
        ////$tf/*
        ///
        ///
        ///
        ///## Ignore Visual Studio temporary files, build results, and
        ///## files generated by popular Visual Studio add-ons.
        ///
        ///# User-specific files
        ///*.suo
        ///*.user
        ///*.userosscache
        ///*.sln.docstates
        ///
        ///# User-specific files (MonoDevelop/Xamarin Studio)
        ///*.userprefs
        ///
        ///# Build results
        ///[Dd]ebug/
        ///[Dd]ebugPublic/
        ///[Rr]elease/
        ///[Rr]eleases/
        ///x64/
        ///x86/
        ///build/
        ///bld/
        ///[Bb]in/
        ///[Oo]bj/
        ///
        ///# Visual Studo 2015 cache/opt [rest of string was truncated]&quot;;.
        /// </summary>
        public static string vsSlnIgnore {
            get {
                return ResourceManager.GetString("vsSlnIgnore", resourceCulture);
            }
        }
    }
}
